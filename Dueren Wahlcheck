.
├─ package.json
├─ next.config.js
├─ postcss.config.js
├─ tailwind.config.js
├─ tsconfig.json
├─ public/
│  └─ favicon.ico
├─ app/
│  ├─ globals.css
│  ├─ layout.tsx
│  └─ page.tsx
{
  "name": "dueren-wahlcheck",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "14.2.5",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "lucide-react": "^0.454.0",
    "recharts": "^2.10.3"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.5.4"
  }
}
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};
module.exports = nextConfig;
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": "."
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
@tailwind base;
@tailwind components;
@tailwind utilities;

:root { color-scheme: light; }
html, body { height: 100%; }
body { @apply bg-gray-50 text-gray-900; }
import "./globals.css";
import type { Metadata } from "next";

export const metadata: Metadata = {
  title: "Düren Wahl-Check",
  description: "15 Thesen – vergleiche deine Positionen mit Hamm (CDU) & Ullrich (SPD)",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="de">
      <body>{children}</body>
    </html>
  );
}
"use client";
import React, { useMemo, useState } from "react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, LabelList } from "recharts";
import { Check, Minus, X, RotateCcw } from "lucide-react";

type ChoiceKey = "agree" | "neutral" | "disagree";

type Thesis = {
  id: number;
  theme: string;
  text: string;
  positions: { SPD: ChoiceKey; CDU: ChoiceKey };
};

const CHOICES: Record<ChoiceKey, { label: string; className: string; icon: React.ReactNode }> = {
  agree: { label: "Zustimmung", className: "bg-green-500 text-white", icon: <Check className="h-4 w-4"/> },
  neutral: { label: "Neutral", className: "bg-white text-gray-900 border border-gray-300", icon: <Minus className="h-4 w-4"/> },
  disagree: { label: "Ablehnung", className: "bg-red-500 text-white", icon: <X className="h-4 w-4"/> },
};

// 15 Thesen – aus der Vergleichstabelle abgeleitet (vereinfachte, didaktische Thesen)
const THESES: Thesis[] = [
  { id: 1, theme: "Mobilität", text: "Düren soll den ÖPNV deutlich ausbauen.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 2, theme: "Mobilität", text: "On‑Demand‑Verkehre (Rufbus/Share) sollen gefördert werden.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 3, theme: "Mobilität", text: "Mobilität muss barrierefrei gestaltet werden.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 4, theme: "Mobilität", text: "Kostenloses Parken in der Innenstadt einführen.", positions: { SPD: "disagree", CDU: "agree" } },
  { id: 5, theme: "Straßenbau", text: "Die B399n soll vorangetrieben werden.", positions: { SPD: "neutral", CDU: "agree" } },
  { id: 6, theme: "Radverkehr", text: "Radvorrangrouten / sichere Radwege priorisieren.", positions: { SPD: "agree", CDU: "agree" } },
  { id: 7, theme: "Wohnen", text: "Eine Kreis‑Wohnungsbaugesellschaft für mehr geförderten Wohnraum stärken.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 8, theme: "Stadtentwicklung", text: "Zielmarke 100.000 Einwohner und schnellere Baugenehmigungen setzen.", positions: { SPD: "neutral", CDU: "agree" } },
  { id: 9, theme: "Stadtentwicklung", text: "Das Programm \"Jung kauft Alt\" als Leitinstrument nutzen.", positions: { SPD: "neutral", CDU: "agree" } },
  { id: 10, theme: "Bildung & Betreuung", text: "Beitragsfreie Kitas einführen/ausbauen.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 11, theme: "Bildung & Betreuung", text: "OGS (Offener Ganztag) und Jugendkulturangebote ausbauen.", positions: { SPD: "agree", CDU: "agree" } },
  { id: 12, theme: "Gesundheit & Pflege", text: "Telemedizin und einen pflegerischen Studiengang in der Region stärken.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 13, theme: "Sicherheit & Ordnung", text: "Null‑Toleranz mit Videoüberwachung und Waffen-/Alkoholverbotszonen umsetzen.", positions: { SPD: "neutral", CDU: "agree" } },
  { id: 14, theme: "Klima & Soziales", text: "Klimapolitik sozial gerecht gestalten (z. B. bezahlbare Mobilität).", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 15, theme: "Umwelt", text: "Naturschutz ohne Verbote; Fokus auf Sanierung, Begrünung, Extremwetterkonzepte.", positions: { SPD: "neutral", CDU: "agree" } },
];

const PersonCard: React.FC<{ name: string; party: string; bullets: string[] }> = ({ name, party, bullets }) => (
  <div className="border rounded-xl bg-white shadow-sm">
    <div className="p-4 border-b">
      <div className="text-xl font-semibold flex items-center gap-2">
        <span className="px-2 py-0.5 text-xs rounded-full bg-gray-100">{party}</span>
        {name}
      </div>
    </div>
    <div className="p-4">
      <ul className="list-disc pl-6 space-y-1 text-sm text-gray-700">
        {bullets.map((b, i) => <li key={i}>{b}</li>)}
      </ul>
    </div>
  </div>
);

function Legend() {
  return (
    <div className="flex items-center gap-4 text-sm">
      <span className="inline-flex items-center gap-1"><span className="inline-block w-3 h-3 bg-green-500 rounded-sm"></span>Zustimmung</span>
      <span className="inline-flex items-center gap-1"><span className="inline-block w-3 h-3 bg-white border rounded-sm"></span>Neutral</span>
      <span className="inline-flex items-center gap-1"><span className="inline-block w-3 h-3 bg-red-500 rounded-sm"></span>Ablehnung</span>
    </div>
  );
}

const ThesisRow: React.FC<{ thesis: Thesis; choice: ChoiceKey | null; onChoose: (c: ChoiceKey) => void; }> = ({ thesis, choice, onChoose }) => (
  <div className="p-4 border rounded-lg bg-white shadow-sm">
    <div className="mb-2 text-xs uppercase tracking-wide text-gray-500">{thesis.theme}</div>
    <div className="mb-3 font-medium text-gray-900">{thesis.text}</div>
    <div className="grid grid-cols-3 gap-2 mb-3">
      {(Object.keys(CHOICES) as ChoiceKey[]).map((key) => (
        <button
          key={key}
          onClick={() => onChoose(key)}
          className={`flex items-center justify-center gap-2 px-3 py-2 rounded-lg text-sm transition ${
            choice === key ? CHOICES[key].className : "bg-gray-50 text-gray-900 border border-gray-200 hover:bg-gray-100"
          }`}
          aria-pressed={choice === key}
        >
          {CHOICES[key].icon}
          {CHOICES[key].label}
        </button>
      ))}
    </div>
    <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
      <div><span className="font-semibold">Ullrich/SPD:</span> {CHOICES[thesis.positions.SPD].label}</div>
      <div><span className="font-semibold">Hamm/CDU:</span> {CHOICES[thesis.positions.CDU].label}</div>
    </div>
  </div>
);

const ResultBars: React.FC<{ data: { name: string; value: number }[] }> = ({ data }) => (
  <div className="h-64 w-full">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data} margin={{ top: 10, right: 20, bottom: 0, left: 0 }}>
        <XAxis dataKey="name" />
        <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />
        <Tooltip formatter={(v: number) => `${v.toFixed(0)}%`} />
        <Bar dataKey="value">
          <LabelList dataKey="value" position="top" formatter={(v: number) => `${v.toFixed(0)}%`} />
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

function calcPercent(answers: Record<number, ChoiceKey | null>, partyKey: "SPD" | "CDU") {
  let total = 0; let matches = 0;
  for (const t of THESES) {
    const cand = t.positions[partyKey];
    const ans = answers[t.id];
    if (!ans) continue;               // nicht beantwortet -> ignorieren
    if (cand === "neutral") continue; // neutrale Kandidatenposition -> nicht werten
    total += 1;
    if (ans === cand) matches += 1;
  }
  const value = total === 0 ? 0 : (matches / total) * 100;
  return { value, total, matches };
}

export default function Page() {
  const [answers, setAnswers] = useState<Record<number, ChoiceKey | null>>(
    Object.fromEntries(THESES.map(t => [t.id, null])) as Record<number, ChoiceKey | null>
  );

  const done = useMemo(() => Object.values(answers).filter(Boolean).length, [answers]);
  const resSPD = useMemo(() => calcPercent(answers, "SPD"), [answers]);
  const resCDU = useMemo(() => calcPercent(answers, "CDU"), [answers]);

  return (
    <div className="mx-auto max-w-5xl p-6 space-y-6">
      <header className="flex flex-col gap-3 md:flex-row md:items-end md:justify-between">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Düren Wahl‑Check: 15 Thesen</h1>
          <p className="text-gray-600 max-w-2xl">Positioniere dich zu den Thesen. Danach siehst du, wie oft deine Antworten mit den Positionen der Kandidaten übereinstimmen.</p>
          <div className="mt-2"><Legend /></div>
        </div>
        <div className="space-y-2 w-full md:w-72">
          <div className="text-sm text-gray-700">Fragebogen: {done}/15 beantwortet</div>
          <button
            className="flex items-center gap-2 px-3 py-2 border rounded-lg text-sm hover:bg-gray-100"
            onClick={() => setAnswers(Object.fromEntries(THESES.map(t => [t.id, null])) as any)}
          >
            <RotateCcw className="h-4 w-4"/> Zurücksetzen
          </button>
        </div>
      </header>

      {/* Kandidaten-Infos */}
      <section className="grid sm:grid-cols-2 gap-4">
        <PersonCard
          name="Frank Peter Ullrich"
          party="SPD"
          bullets={[
            "ÖPNV-Ausbau, barrierefreie und klimafreundliche Mobilität",
            "Beitragsfreie Kitas, Schulsozialarbeit, digitale Infrastruktur",
            "Telemedizin und pflegerischer Studiengang stärken",
            "Kreis‑Wohnungsbaugesellschaft, bezahlbarer Wohnraum, Bodenspekulation bekämpfen",
            "Bürgerportal, 72‑Stunden‑Bearbeitungsziel, KI‑gestützte Anträge",
            "Unbürokratische Förderung von Ehrenamt und Vereinen",
          ]}
        />
        <PersonCard
          name="Georg Hamm"
          party="CDU"
          bullets={[
            "\"Stadt des Schaffens\": Gewerbeflächen, Innovation Center, Hochschulkooperation",
            "Gleichberechtigung aller Verkehrsteilnehmer, kostenloses Parken, B399n, Radvorrangrouten",
            "Ziel: 100.000 Einwohner, schnellere Baugenehmigungen, Programm \"Jung kauft Alt\"",
            "Naturschutz ohne Verbote; energetische Sanierung; Begrünung; Extremwetterkonzepte",
            "Mobile Rathäuser, Verwaltungsreform, KI zur Effizienzsteigerung",
            "Stadtteilbudgets, kulturelle Einrichtungen stärken, Annakirmes fördern",
          ]}
        />
      </section>

      {/* Thesenliste */}
      <section className="space-y-3">
        {THESES.map((t) => (
          <ThesisRow key={t.id} thesis={t} choice={answers[t.id]} onChoose={(c) => setAnswers((p) => ({ ...p, [t.id]: c }))} />
        ))}
      </section>

      {/* Ergebnisse */}
      <section className="grid md:grid-cols-2 gap-6 items-start">
        <div className="p-4 border rounded-lg bg-white shadow">
          <h2 className="font-semibold mb-2">Deine Übereinstimmung</h2>
          <ResultBars data={[{ name: "Ullrich/SPD", value: resSPD.value }, { name: "Hamm/CDU", value: resCDU.value }]} />
          <div className="mt-3 grid grid-cols-2 gap-4 text-sm">
            <div className="p-3 rounded-xl bg-gray-50 border">
              <div className="font-semibold">Ullrich/SPD</div>
              <div className="text-2xl font-bold">{resSPD.value.toFixed(0)}%</div>
              <div className="text-xs text-gray-600">{resSPD.matches} von {resSPD.total} gewerteten Thesen</div>
            </div>
            <div className="p-3 rounded-xl bg-gray-50 border">
              <div className="font-semibold">Hamm/CDU</div>
              <div className="text-2xl font-bold">{resCDU.value.toFixed(0)}%</div>
              <div className="text-xs text-gray-600">{resCDU.matches} von {resCDU.total} gewerteten Thesen</div>
            </div>
          </div>
          <p className="text-xs text-gray-500 mt-3">Hinweis: Neutrale Kandidatenpositionen werden für die Prozentrechnung nicht mitgezählt.</p>
        </div>
        <div className="rounded-2xl p-4 bg-gradient-to-r from-indigo-50 to-emerald-50 border border-indigo-100">
          <div className="text-lg font-semibold">Deine Stimme zählt! 🗳️</div>
          <p className="text-sm text-gray-700 mt-1">Wählen ist super wichtig: Du bestimmst mit, wie sich Düren entwickelt – von Radwegen über Kitas bis zur digitalen Verwaltung. Nutze dein Wahlrecht!</p>
        </div>
      </section>

      <footer className="text-xs text-gray-500 pt-4">
        Diese Web‑App ist eine didaktische Ableitung aus öffentlich kommunizierten Schwerpunkten. Keine Gewähr auf Vollständigkeit.
      </footer>
    </div>
  );
}
