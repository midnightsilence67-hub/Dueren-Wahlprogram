import React, { useMemo, useState } from "react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, LabelList } from "recharts";
import { Check, Minus, X, RotateCcw } from "lucide-react";

// =====================================
// DÜREN WAHL-CHECK – 15 THESEN TOOL
// Kandidaten: Georg Hamm (CDU), Frank Peter Ullrich (SPD)
// =====================================

const CHOICES = {
  agree: { key: "agree", label: "Zustimmung", color: "bg-green-500 text-white", icon: <Check className="h-4 w-4" /> },
  neutral: { key: "neutral", label: "Neutral", color: "bg-white text-gray-900 border border-gray-300", icon: <Minus className="h-4 w-4" /> },
  disagree: { key: "disagree", label: "Ablehnung", color: "bg-red-500 text-white", icon: <X className="h-4 w-4" /> },
} as const;

type ChoiceKey = keyof typeof CHOICES;

type Thesis = {
  id: number;
  text: string;
  theme: string;
  positions: {
    SPD: ChoiceKey;
    CDU: ChoiceKey;
  };
};

// Beispiel-Thesen (vereinfachte Fassung, hier nur 3 als Demo)
const THESES: Thesis[] = [
  { id: 1, theme: "Mobilität", text: "Düren soll ÖPNV ausbauen.", positions: { SPD: "agree", CDU: "neutral" } },
  { id: 2, theme: "Mobilität", text: "Kostenloses Parken in der Innenstadt einführen.", positions: { SPD: "disagree", CDU: "agree" } },
  { id: 3, theme: "Radverkehr", text: "Sichere Radwege priorisieren.", positions: { SPD: "agree", CDU: "agree" } },
];

const ThesisRow: React.FC<{
  thesis: Thesis;
  choice: ChoiceKey | null;
  onChoose: (c: ChoiceKey) => void;
}> = ({ thesis, choice, onChoose }) => (
  <div className="p-4 border rounded-lg bg-white shadow-sm">
    <div className="mb-2 text-xs uppercase tracking-wide text-gray-500">{thesis.theme}</div>
    <div className="mb-3 font-medium text-gray-900">{thesis.text}</div>
    <div className="grid grid-cols-3 gap-2 mb-3">
      {Object.values(CHOICES).map((opt) => (
        <button
          key={opt.key}
          onClick={() => onChoose(opt.key)}
          className={`flex items-center justify-center gap-2 px-3 py-2 rounded-lg text-sm transition ${
            choice === opt.key ? opt.color : "bg-gray-50 text-gray-900 border border-gray-200 hover:bg-gray-100"
          }`}
        >
          {opt.icon}
          {opt.label}
        </button>
      ))}
    </div>
    <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
      <div><span className="font-semibold">Ullrich/SPD:</span> {CHOICES[thesis.positions.SPD].label}</div>
      <div><span className="font-semibold">Hamm/CDU:</span> {CHOICES[thesis.positions.CDU].label}</div>
    </div>
  </div>
);

const ResultBars: React.FC<{ data: { name: string; value: number }[] }> = ({ data }) => (
  <div className="h-64 w-full">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={data}>
        <XAxis dataKey="name" />
        <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />
        <Tooltip formatter={(v: number) => `${v.toFixed(0)}%`} />
        <Bar dataKey="value" fill="#4f46e5">
          <LabelList dataKey="value" position="top" formatter={(v: number) => `${v.toFixed(0)}%`} />
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const calcPercent = (answers: Record<number, ChoiceKey | null>, partyKey: "SPD" | "CDU") => {
  let total = 0;
  let matches = 0;
  for (const t of THESES) {
    const cand = t.positions[partyKey];
    const ans = answers[t.id];
    if (!ans) continue;
    if (cand === "neutral") continue;
    total += 1;
    if (ans === cand) matches += 1;
  }
  const value = total === 0 ? 0 : (matches / total) * 100;
  return { value, total, matches };
};

export default function DuerenerWahlCheck() {
  const [answers, setAnswe
